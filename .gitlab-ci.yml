# Copyright Open Logistics Foundation
# 
# Licensed under the Open Logistics Foundation License 1.3.
# For details on the licensing terms, see the LICENSE file.
# SPDX-License-Identifier: OLFL-1.3
# 

stages:
  - Images
  - Build
  - Test
  - Code-Analysis
  - Deploy

include:
  - '.gitlab/docker/package/version.yml'
  - '.gitlab/docker/sonar/version.yml'

variables:
  CI_VDA5050_MESSAGE_STRUCTS_URL:
    value: "https://git.openlogisticsfoundation.org/silicon-economy/libraries/vda5050/vda5050_message_structs.git"
    description: "Set the URL for the vda5050_message_structs repository."

# This before_script sets up a key access for the private vda5050_message_structs repository
default:
  image: ubuntu:jammy
  before_script:
    - echo "Writing .ssh/id_ed25519 private keyfile and setting up .ssh/known_hosts for FhG's GitLab server..."
    - mkdir -p ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - "command -v ssh-agent >/dev/null || ( apt-get update -yq && apt-get install openssh-client -yq )" # ensure that ssh-agent is installed ...
    - eval $(ssh-agent -s) # ... and running
    - echo "$CI_CD_KEY" | base64 -d > ~/.ssh/id_ed25519 # construct private keyfile from masked key
      # Note: The key/content of $CI_CD_KEY was extracted from a locally generated pair (of type ED25519) at ~/.ssh/id_ed25519
      #       by the following command: cat ~/.ssh/id_ed25519 | base64 -w0
      #       to get rid of newlines in order to be able to make it a MASKED variable in the GitLab web interface. "base64 -d"
      #       then performs the decoding. The corresponding public key has been added for the dependency (library) to
      #       https://gitlab.cc-asp.fraunhofer.de/silicon-economy/services/odyn/vda5050/simpleptn/-/settings/repository under "Deploy keys".
    - chmod 600 ~/.ssh/id_ed25519
    # cat ~/.ssh/id_ed25519  | ssh-add - # add the private ssh key

build_sonar_image:
  stage: Images
  image:
    name: gcr.io/kaniko-project/executor:v1.9.1-debug
    entrypoint: [""]
  dependencies: []
  before_script: []
  script:
    - echo "Building sonar image with tag ${SONAR_IMAGE_TAG}..."
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - '/kaniko/executor
      --context "${CI_PROJECT_DIR}/.gitlab/docker/sonar"
      --dockerfile "${CI_PROJECT_DIR}/.gitlab/docker/sonar/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sonar:${SONAR_IMAGE_TAG}"'
  only:
    refs:
      - branches
    changes:
      - '.gitlab/docker/sonar/version.yml'

build_package_image:
  stage: Images
  image:
    name: gcr.io/kaniko-project/executor:v1.9.1-debug
    entrypoint: [""]
  dependencies: []
  before_script: []
  script:
    - echo "Building package image with tag ${PACKAGE_IMAGE_TAG}..."
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - '/kaniko/executor
      --context "${CI_PROJECT_DIR}/.gitlab/docker/package"
      --dockerfile "${CI_PROJECT_DIR}/.gitlab/docker/package/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/package:${PACKAGE_IMAGE_TAG}"'
  only:
    refs:
      - branches
    changes:
      - '.gitlab/docker/package/version.yml'

build_debug:
  stage: Build
  image: ${CI_REGISTRY_IMAGE}/sonar:${SONAR_IMAGE_TAG}
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_DEPTH: 0
  script:
    - mkdir -p sonar_build_wrapper
    - pushd sonar_build_wrapper
    - wget $SONAR_HOST_URL/static/cpp/build-wrapper-linux-x86.zip
    - unzip -j build-wrapper-linux-x86.zip
    - popd
    - mkdir build_wrapper_output_directory
    - /usr/bin/cmake --no-warn-unused-cli
      -DVDA5050_MESSAGE_STRUCTS_URL:STRING=${CI_VDA5050_MESSAGE_STRUCTS_URL}
      -DLIBVDA5050PP_VDA5050_MESSAGE_STRUCTS_DEP_LOCAL:BOOL=FALSE
      -DLIBVDA5050PP_CI_ENABLE_ALL:BOOL=TRUE
      -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE
      -DCMAKE_BUILD_TYPE:STRING=Debug
      -DCMAKE_CXX_COMPILER:FILEPATH=/usr/bin/clang++-14
      -B build
      -G "Ninja"
    - ./sonar_build_wrapper/build-wrapper-linux-x86-64
      --out-dir build_wrapper_output_directory
        /usr/bin/cmake
        --build build
        --config Debug
        --target vda5050++_test
  artifacts:
    when: always
    paths:
      - build/
      - build_wrapper_output_directory/
    expire_in: 1 week
  tags:
    - docker
  rules:
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) || ($CI_COMMIT_BRANCH == "dev")
      allow_failure: false
    # "Default clause" meaning: in all other cases
    - when: on_success
      allow_failure: true

build_release:
  stage: "Build"
  image: ${CI_REGISTRY_IMAGE}/package:${PACKAGE_IMAGE_TAG}
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_DEPTH: 0
  script:
    - /usr/bin/cmake --no-warn-unused-cli
      -DVDA5050_MESSAGE_STRUCTS_URL:STRING=${CI_VDA5050_MESSAGE_STRUCTS_URL}
      -DLIBVDA5050PP_VDA5050_MESSAGE_STRUCTS_DEP_LOCAL:BOOL=FALSE
      -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE
      -DCMAKE_BUILD_TYPE:STRING=Release
      -DLIBVDA5050PP_BUILD_DOCS:BOOL=TRUE
      -DLIBVDA5050PP_INSTALL:BOOL=TRUE
      -DLIBVDA5050PP_CLEAN_INSTALL:BOOL=TRUE
      -DLIBVDA5050PP_BUILD_DEB:BOOL=TRUE
      -DBUILD_TESTING:BOOL=OFF
      -DLIBVDA5050PP_CATCH2_VERSION:STRING=2.13.8
      -DLIBVDA5050PP_NLOHMANN_JSON_VERSION:STRING=3.10.5
      -DCMAKE_INSTALL_PREFIX:FILEPATH=/usr
      -DCMAKE_CXX_COMPILER:FILEPATH=/usr/bin/clang++-14
      -B build
      -G "Ninja"
    - /usr/bin/cmake
      --build build
      --config Release
      --target vda5050++
  artifacts:
    paths:
      - build/
    expire_in: 1 week
  tags:
    - docker
  rules:
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) || ($CI_COMMIT_BRANCH == "dev")
      allow_failure: false
    # "Default clause" meaning: in all other cases
    - when: on_success
      allow_failure: true

unittest:
  stage: Test
  image: ${CI_REGISTRY_IMAGE}/sonar:${SONAR_IMAGE_TAG}
  needs:
    - job: build_debug
      artifacts: true
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_DEPTH: 0
  script:
    - /usr/bin/cmake
      --build build
      --config Debug
      --target ccov-show-file-vda5050++_test
  artifacts:
    when: always
    reports:
      junit:
        - build/vda5050++_test.xml
    paths:
      - build/ccov/vda5050++_test.txt
      - build_wrapper_output_directory/
    expire_in: 1 week
  tags:
    - docker
  rules:
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) || ($CI_COMMIT_BRANCH == "dev")
      allow_failure: false
    # "Default clause" meaning: in all other cases
    - when: on_success
      allow_failure: true

sonarqube:
  stage: Code-Analysis
  image: ${CI_REGISTRY_IMAGE}/sonar:${SONAR_IMAGE_TAG}
  needs:
    - job: unittest
      artifacts: true
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_DEPTH: 0
  script:
    # Sonar does not work properly if there is no blame information, this ensures a complete history
    - git fetch --unshallow || true
    - sonar-scanner -X
      -Dsonar.projectKey=odyn.navsim.libvda5050pp
      -Dsonar.projectName=odyn.navsim.libvda5050pp
      -Dsonar.cfamily.build-wrapper-output=build_wrapper_output_directory
      -Dsonar.host.url=$SONAR_HOST_URL
      -Dsonar.login=$SONAR_TOKEN
      -Dsonar.sourceEncoding=UTF-8
      -Dsonar.cfamily.threads=1
      -Dsonar.cfamily.cache.enabled=false
      -Dsonar.cfamily.llvm-cov.reportPath=build/ccov/vda5050++_test.txt
      -Dsonar.qualitygate.wait=true
      -Dsonar.sources=include,src
      -Dsonar.tests=test
      -Dsonar.verbose=true
  rules:
    # Sonar analysis must succeed (i.e. the quality gate must be passed) in main and MRs
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) || $CI_MERGE_REQUEST_ID
      allow_failure: false
    # "Default clause" meaning: in all other cases
    - when: on_success
      allow_failure: true
  tags:
    - docker
  cache:
    key: "sonar-${CI_PROJECT_ID}"
    paths:
      - ".scannerwork"
      - ".sonar"

pages:
  stage: Deploy
  image: ${CI_REGISTRY_IMAGE}/package:${PACKAGE_IMAGE_TAG}
  needs:
    - job: build_release
      artifacts: true
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_DEPTH: 0
  script:
    - /usr/bin/cmake
      --build build
      --config Release
      --target mkdocs
    - mv build/site/ public/
  artifacts:
    paths:
      - public
  tags:
    - docker
  allow_failure: false
  rules:
  - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)

deb_package:
  stage: Deploy
  image: ${CI_REGISTRY_IMAGE}/package:${PACKAGE_IMAGE_TAG}
  needs:
    - job: build_release
      artifacts: true
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_DEPTH: 0
  script:
    - /usr/bin/cmake
      --build build
      --config Release
      --target package
  artifacts:
    paths:
      - build/*.deb
  tags:
    - docker
  allow_failure: false
